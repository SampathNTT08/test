# This workflow will build a MuleSoft project and deploy to CloudHub Test environment

name: Build and Deploy to Test
on:
  push:
    branches: [ test ]
  workflow_dispatch:
    
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CA_CLIENT_ID: ${{ secrets.CA_CLIENT_ID }}
      CA_CLIENT_SECRET: ${{ secrets.CA_CLIENT_SECRET }}
    
    steps:
    
    - name: Checkout this repo
      uses: actions/checkout@v3
    
    - name: Cache dependencies
      uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
           
    
    - name: Print effective-settings (optional)
      run: mvn help:effective-settings
    
    - name: Build with maven
      run: mvn -B clean package -s .maven/settings.xml
    
    - name: Stamp artifact file name with commit hash
      run: |
        artifactName1=$(ls target/*.jar | head -1)
        commitHash=$(git rev-parse --short "$GITHUB_SHA")
        artifactName2=$(ls target/*.jar | head -1 | sed "s/.jar/-$commitHash.jar/g")
        mv $artifactName1 $artifactName2
    
    - name: Upload artifact 
      uses: actions/upload-artifact@master
      with:
          name: artifacts
          path: target/*.jar
          
  upload:
    needs: build
    runs-on: ubuntu-latest
    env:
      CA_CLIENT_ID: ${{ secrets.CA_CLIENT_ID }}
      CA_CLIENT_SECRET: ${{ secrets.CA_CLIENT_SECRET }}          
    
    environment: 
      name: test
    
    steps:    
    
    - uses: actions/checkout@v3
    
    - uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    
    - uses: actions/download-artifact@master
      with:
        name: artifacts
    
    - name: Upload to Exchange
      run: |
        artifactName=$(ls *.jar | head -1)
        mvn deploy -s .maven/settings.xml -Dmule.artifact=$artifactName
         
  deploy:
    needs: build
    runs-on: ubuntu-latest
    env:
      CA_CLIENT_ID: ${{ secrets.CA_CLIENT_ID }}
      CA_CLIENT_SECRET: ${{ secrets.CA_CLIENT_SECRET }}
      ANYPOINT_PLATFORM_CLIENT_ID: ${{ secrets.ANYPOINT_PLATFORM_CLIENT_ID_TEST }}
      ANYPOINT_PLATFORM_CLIENT_SECRET: ${{ secrets.ANYPOINT_PLATFORM_CLIENT_SECRET_TEST }}
      
    environment: 
      name: test
      
    steps:    
  
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Cache dependencies
      uses: actions/download-artifact@master
      with:
        name: artifacts
    - name: Deploy to Test
      run: |
        artifactName=$(ls *.jar | head -1)
        
        mvn deploy -e -DmuleDeploy -DapplicationName=munit-test-v2 -Dmule.artifact=$artifactName -s .maven/settings.xml -Dserver=ca.anypoint.credentials -Denvironment=qa -Dmule.env=qa  --file pom.xml
